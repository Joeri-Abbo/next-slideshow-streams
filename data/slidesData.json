[
  {
    "title": "Streams",
    "background_image": "bg.jpg",
    "image_left": "",
    "image_right": "stream.png",
    "text_left": "<p>- AWS SNS / SQS</p><p>- Redis Pub sub</p><p>- RabbitMQ</p><p>- Apache Kafka</p><p><br></p>",
    "text_right": ""
  },
  {
    "title": "AWS SNS  / SQS",
    "background_image": "bg.jpg",
    "image_left": "",
    "image_right": "sns.png",
    "text_left": "<p>AWS SNS is a pub/sub messaging service for sending notifications to multiple subscribers, while AWS SQS is a message queuing service for decoupling and scaling applications by allowing messages to be stored and processed asynchronously. SNS is ideal for broadcasting messages widely, and SQS is suited for reliable, ordered processing of messages by a single consumer. Together, they enable scalable, flexible, and efficient communication across different parts of cloud applications.</p><p><br></p><p><a href=\"https://www.youtube.com/watch?v=JIbIYCM48to&amp;ab_channel=Fireship\" rel=\"noopener noreferrer\" target=\"_blank\">Fireship</a></p><p><a href=\"https://www.youtube.com/watch?v=mXk0MNjlO7A&amp;ab_channel=BeABetterDev\" rel=\"noopener noreferrer\" target=\"_blank\">SNS vs SQS Comparison? Whats the difference? | Learn with a practical example</a></p>",
    "text_right": ""
  },
  {
    "title": "Redis Pub sub",
    "background_image": "bg.jpg",
    "image_left": "",
    "image_right": "redis.png",
    "text_left": "<p>Redis Pub/Sub is a messaging pattern within Redis that enables message broadcasting through channels. Publishers send messages to specific channels, and subscribers listen to those channels to receive messages. This model facilitates efficient, real-time communication between components in a distributed system, ideal for chat applications, live updates, and triggering actions in response to events.</p><p><br></p><p><br></p><p><a href=\"https://www.youtube.com/watch?v=KIFA_fFzSbo&amp;ab_channel=CodingwithRaphaelDeLio\" rel=\"noopener noreferrer\" target=\"_blank\">Coding with Raphael De Lio</a></p>",
    "text_right": ""
  },
  {
    "title": "RabbitMQ",
    "background_image": "bg.jpg",
    "image_left": "",
    "image_right": "rabbit.png",
    "text_left": "<p>RabbitMQ is an open-source message broker that enables complex routing, message queuing, and processing across distributed systems. It supports multiple messaging protocols, message queuing, delivery acknowledgment, and flexible routing to queues with topic-based subscription and pattern matching. RabbitMQ facilitates decoupled application architectures by allowing asynchronous communication, enhancing scalability and reliability.</p><p><br></p><p><a href=\"https://www.youtube.com/watch?v=NQ3fZtyXji0&amp;ab_channel=Fireship\" rel=\"noopener noreferrer\" target=\"_blank\">Fireship</a></p>",
    "text_right": ""
  },
  {
    "title": "Apache Kafka",
    "background_image": "bg.jpg",
    "image_left": "",
    "image_right": "kafka.png",
    "text_left": "<p>Apache Kafka is a distributed streaming platform designed for high-throughput, fault-tolerant message publishing and subscription. It enables the building of real-time streaming data pipelines and applications that adapt to data streams. Kafka is characterized by its ability to handle large volumes of data, support for multiple consumers, message persistence, and replay capabilities, making it ideal for event-driven architectures, logging, and stream processing.</p><p><br></p><p><a href=\"https://www.youtube.com/watch?v=uvb00oaa3k8&amp;ab_channel=Fireship\" rel=\"noopener noreferrer\" target=\"_blank\">Fireship</a></p>",
    "text_right": ""
  }
]
